/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from "./pages/__root";
import { Route as IndexImport } from "./pages/index";
import { Route as FooIndexImport } from "./pages/foo/index";
import { Route as BarIndexImport } from "./pages/bar/index";
import { Route as BarPiyoIndexImport } from "./pages/bar/piyo/index";

// Create/Update Routes

const IndexRoute = IndexImport.update({
  id: "/",
  path: "/",
  getParentRoute: () => rootRoute,
} as any);

const FooIndexRoute = FooIndexImport.update({
  id: "/foo/",
  path: "/foo/",
  getParentRoute: () => rootRoute,
} as any);

const BarIndexRoute = BarIndexImport.update({
  id: "/bar/",
  path: "/bar/",
  getParentRoute: () => rootRoute,
} as any);

const BarPiyoIndexRoute = BarPiyoIndexImport.update({
  id: "/bar/piyo/",
  path: "/bar/piyo/",
  getParentRoute: () => rootRoute,
} as any);

// Populate the FileRoutesByPath interface

declare module "@tanstack/react-router" {
  interface FileRoutesByPath {
    "/": {
      id: "/";
      path: "/";
      fullPath: "/";
      preLoaderRoute: typeof IndexImport;
      parentRoute: typeof rootRoute;
    };
    "/bar/": {
      id: "/bar/";
      path: "/bar";
      fullPath: "/bar";
      preLoaderRoute: typeof BarIndexImport;
      parentRoute: typeof rootRoute;
    };
    "/foo/": {
      id: "/foo/";
      path: "/foo";
      fullPath: "/foo";
      preLoaderRoute: typeof FooIndexImport;
      parentRoute: typeof rootRoute;
    };
    "/bar/piyo/": {
      id: "/bar/piyo/";
      path: "/bar/piyo";
      fullPath: "/bar/piyo";
      preLoaderRoute: typeof BarPiyoIndexImport;
      parentRoute: typeof rootRoute;
    };
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  "/": typeof IndexRoute;
  "/bar": typeof BarIndexRoute;
  "/foo": typeof FooIndexRoute;
  "/bar/piyo": typeof BarPiyoIndexRoute;
}

export interface FileRoutesByTo {
  "/": typeof IndexRoute;
  "/bar": typeof BarIndexRoute;
  "/foo": typeof FooIndexRoute;
  "/bar/piyo": typeof BarPiyoIndexRoute;
}

export interface FileRoutesById {
  __root__: typeof rootRoute;
  "/": typeof IndexRoute;
  "/bar/": typeof BarIndexRoute;
  "/foo/": typeof FooIndexRoute;
  "/bar/piyo/": typeof BarPiyoIndexRoute;
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath;
  fullPaths: "/" | "/bar" | "/foo" | "/bar/piyo";
  fileRoutesByTo: FileRoutesByTo;
  to: "/" | "/bar" | "/foo" | "/bar/piyo";
  id: "__root__" | "/" | "/bar/" | "/foo/" | "/bar/piyo/";
  fileRoutesById: FileRoutesById;
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute;
  BarIndexRoute: typeof BarIndexRoute;
  FooIndexRoute: typeof FooIndexRoute;
  BarPiyoIndexRoute: typeof BarPiyoIndexRoute;
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  BarIndexRoute: BarIndexRoute,
  FooIndexRoute: FooIndexRoute,
  BarPiyoIndexRoute: BarPiyoIndexRoute,
};

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>();

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/bar/",
        "/foo/",
        "/bar/piyo/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/bar/": {
      "filePath": "bar/index.tsx"
    },
    "/foo/": {
      "filePath": "foo/index.tsx"
    },
    "/bar/piyo/": {
      "filePath": "bar/piyo/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
